service cloud.firestore {

  match /databases/{database}/documents {

    function isTenant(tenantId) {
        return request.auth.uid == tenantId && exists(/databases/$(database)/documents/tenants/$(request.auth.uid));
    }

    function isCurrentUser(uid) {
      return request.auth.uid == uid;
    }

    match /tenants/{uid} {

      allow read: if true;

      // from the UI, only allow creation of new (and still free) tenants
      allow create: if request.auth.uid != null && request.resource.data.status == 'new';

      // only the tenant can modify its own data
      allow update: if isTenant(uid);

    }


    match /tenantSettings/{uid} {

      // only the tenant himself can both read and edit its own settings, this is private data
      allow read,write: if isTenant(uid);

    }

    match /schools/{tenantId}/courses/{courseId}  {

        // all course data is public
        allow read: if true;

        // only tenants can modify course data - and only their own courses
        allow write: if isTenant(tenantId);

        // for sections and lessons
        match /{document=**} {

          // everything is public
          allow read: if true;

          // but only tenants can udpate or delete sections or lessons
          allow write, delete: if isTenant(tenantId);

        }

        // tenants can only delete draft courses, to avoid accidents
        allow delete: if isTenant() && resource.data.status == 'draft';

    }

    match /schools/{tenantId}/descriptions/{courseId}  {

        // all text descriptions are public info
        allow read: if true;

        // only tenants can edit descriptions
        allow write, delete: if isTenant(tenantId);

    }

    match /schools/{tenantId}/users/{uid}  {

        // user data is only visible by the tenant or the user himself
        allow read: if isTenant(uid) || isCurrentUser(uid);

        // only the tenant or the user himself can create or edit user data
        allow write: if isTenant(tenantId)  || isCurrentUser(uid);

    }


  }

}
